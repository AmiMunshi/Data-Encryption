# Program to find gcd of two numbers
def euclid(m,n):
  if n==0:
    return m
  else:
    r= m%n
    return euclid(n,r)

#Program to find Multiplicative inverse
def exteuclid(a,b):
  r1=a
  r2=b
  s1= int(1)
  s2= int(0)
  t1= int(0)
  t2= int(1)
  while r2>0:
    q= r1//r2
    r= r1-q*r2
    r1= r2
    r2 = r
    s= s1-q*s2
    s1=s2
    s2=s
    t= t1-q*t2
    t1=t2
    t2=t
  if t1<0:
    t1= t1%a
  return (r1,t1)
  
# Enter two large prime numbers
p= int(input("Enter the first prime number: "))
q= int(input("Enter the second prime number: "))
PT= int(input("Enter the plain text number to be encrypted"))
n= p*q
print(n)
Pn= (p-1)*(q-1)
# Generate encryption key in range 1<e<Pn
key= []
for i in range(2,Pn):
  gcd= euclid(Pn,i)
  if gcd==1:
    key.append(i)
print("All possible values of encryption key are: ", key)

# Select an encryption key from the above list
e= int(13)

#Obtain inverse of encryption key in Z_Pn
r, d= exteuclid(Pn,e)
if r==1:
  d=int(d)
  print("decryption key is: ", d)
else:
  print("Multiplicative inverse for the given encryption key does not exist. Choose a different encrytion key ")


ct= pow(PT,e)
ct=ct%n

dt= pow(ct,d)
ct= dt%n

print("For plain text = ", no, ", Cipher text = ", ct, "Decrypted text = ", dt)
 
